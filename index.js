// Generated by CoffeeScript 1.7.1
(function() {
  var REDIRECT_STATUS_CODES, https,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  https = require('https');

  require('colors');

  REDIRECT_STATUS_CODES = [301, 302];

  module.exports = function(options) {
    if (options == null) {
      options = {};
    }
    console.verbose = function() {
      if (options.verbose) {
        return console.log.apply(console, arguments);
      }
    };
    options.replaceHost || (options.replaceHost = function(h) {
      return h;
    });
    return function(req, res, next) {
      var end, handleRedirect, restore, writeHead;
      if (req.connection.encrypted) {
        return next();
      }
      writeHead = res.writeHead;
      end = res.end;
      restore = function() {
        res.writeHead = writeHead;
        return res.end = end;
      };
      handleRedirect = function(statusCode) {
        var identicalLocation, location, redirectReq, redirectStatusCode, requestOptions;
        res.writeHead = res.end = function() {};
        redirectStatusCode = __indexOf.call(REDIRECT_STATUS_CODES, statusCode) >= 0;
        location = res.getHeader('location');
        identicalLocation = (location != null ? location.indexOf('https://' + req.headers.host + req.url) : void 0) === 0;
        if (!(redirectStatusCode && identicalLocation)) {
          return false;
        }
        console.verbose("HTTPlease: follow redirect to", location.yellow);
        req.headers.host = options.host || options.replaceHost(req.headers.host);
        requestOptions = {
          host: req.headers.host,
          path: req.url,
          headers: req.headers
        };
        redirectReq = https.request(requestOptions, function(redirectRes) {
          restore();
          return redirectRes.pipe(res);
        });
        redirectReq.on('error', function(err) {
          restore();
          next(err);
          res.writeHead(500);
          return res.end(err.toString());
        });
        redirectReq.end();
        return true;
      };
      res.writeHead = function() {
        if (!handleRedirect(arguments[0])) {
          restore();
          return writeHead.apply(res, arguments);
        }
      };
      res.end = function() {
        if (!handleRedirect(res.statusCode)) {
          restore();
          return end.apply(res, arguments);
        }
      };
      return next();
    };
  };

}).call(this);
